default xkb_symbols "test" {
	
	name [1] = "Custom";
	
	key <Esc> {
		type = "ONE_LEVEL",
		symbols [1] = [Escape]
	};
	key <1> {
		type = "TWO_LEVEL+OS",
		symbols [1] = [1, exclam, XF86Switch_VT_1]
	};
	key <2> {
		type = "TWO_LEVEL+OS",
		symbols [1] = [2, at, XF86Switch_VT_2]
	};
	key <3> {
		type = "TWO_LEVEL+OS",
		symbols [1] = [3, numbersign, XF86Switch_VT_3]
	};
	key <4> {
		type = "TWO_LEVEL+OS",
		symbols [1] = [4, dollar, XF86Switch_VT_4]
	};
	key <5> {
		type = "TWO_LEVEL+OS",
		symbols [1] = [5, percent, XF86Switch_VT_5]
	};
	key <6> {
		type = "TWO_LEVEL+OS",
		symbols [1] = [6, asciicircum, XF86Switch_VT_6]
	};
	key <7> {
		type = "TWO_LEVEL+OS",
		symbols [1] = [7, ampersand, XF86Switch_VT_7]
	};
	key <8> {
		type = "TWO_LEVEL+OS",
		symbols [1] = [8, asterisk, XF86Switch_VT_8]
	};
	key <9> {
		type = "TWO_LEVEL+OS",
		symbols [1] = [9, parenleft, XF86Switch_VT_9]
	};
	key <0> {
		type = "TWO_LEVEL+OS",
		symbols [1] = [0, parenright, XF86Switch_VT_10]
	};
	key <-> {
		type = "TWO_LEVEL+OS",
		symbols [1] = [minus, underscore, XF86Switch_VT_11]
	};
	key <=> {
		type = "TWO_LEVEL+OS",
		symbols [1] = [equal, plus, XF86Switch_VT_12]
	};
	key <Bksp> {
		type = "ONE_LEVEL",
		symbols [1] = [BackSpace]
	};
	key <Tab> {
		type = "ONE_LEVEL",
		symbols [1] = [Tab]
	};
	key <q> {
		type = "TWO_LEVEL",
		symbols [1] = [q, Q]
	};
	key <w> {
		type = "TWO_LEVEL",
		symbols [1] = [w, W]
	};
	key <e> {
		type = "TWO_LEVEL",
		symbols [1] = [e, E]
	};
	key <r> {
		type = "TWO_LEVEL",
		symbols [1] = [r, R]
	};
	key <t> {
		type = "TWO_LEVEL",
		symbols [1] = [t, T]
	};
	key <y> {
		type = "TWO_LEVEL",
		symbols [1] = [y, Y]
	};
	key <u> {
		type = "TWO_LEVEL",
		symbols [1] = [u, U]
	};
	key <i> {
		type = "TWO_LEVEL",
		symbols [1] = [i, I]
	};
	key <o> {
		type = "TWO_LEVEL",
		symbols [1] = [o, O]
	};
	key <p> {
		type = "TWO_LEVEL",
		symbols [1] = [p, P]
	};
	key <[> {
		type = "TWO_LEVEL",
		symbols [1] = [bracketleft, braceleft]
	};
	key <]> {
		type = "TWO_LEVEL",
		symbols [1] = [bracketright, braceright]
	};
	key <Entr> {
		type = "ONE_LEVEL",
		symbols [1] = [Return]
	};
	key <LCtl> {
		type = "ONE_LEVEL",
		symbols [1] = [Hyper_L]
	};
	key <a> {
		type = "TWO_LEVEL",
		symbols [1] = [a, A]
	};
	key <s> {
		type = "TWO_LEVEL",
		symbols [1] = [s, S]
	};
	key <d> {
		type = "TWO_LEVEL",
		symbols [1] = [d, D]
	};
	key <f> {
		type = "TWO_LEVEL",
		symbols [1] = [f, F]
	};
	key <g> {
		type = "TWO_LEVEL",
		symbols [1] = [g, G]
	};
	key <h> {
		type = "TWO_LEVEL",
		symbols [1] = [h, H]
	};
	key <j> {
		type = "TWO_LEVEL",
		symbols [1] = [j, J]
	};
	key <k> {
		type = "TWO_LEVEL",
		symbols [1] = [k, K]
	};
	key <l> {
		type = "TWO_LEVEL",
		symbols [1] = [l, L]
	};
	key <;> {
		type = "TWO_LEVEL",
		symbols [1] = [semicolon, colon]
	};
	key <'> {
		type = "TWO_LEVEL",
		symbols [1] = [apostrophe, quotedbl]
	};
	key <`> {
		type = "TWO_LEVEL",
		symbols [1] = [grave, asciitilde]
	};
	key <LSft> {
		type = "ONE_LEVEL",
		symbols [1] = [Shift_L]
	};
	key <\\> {
		type = "TWO_LEVEL",
		symbols [1] = [backslash, bar]
	};
	key <z> {
		type = "TWO_LEVEL",
		symbols [1] = [z, Z]
	};
	key <x> {
		type = "TWO_LEVEL",
		symbols [1] = [x, X]
	};
	key <c> {
		type = "TWO_LEVEL",
		symbols [1] = [c, C]
	};
	key <v> {
		type = "TWO_LEVEL",
		symbols [1] = [v, V]
	};
	key <b> {
		type = "TWO_LEVEL",
		symbols [1] = [b, B]
	};
	key <n> {
		type = "TWO_LEVEL",
		symbols [1] = [n, N]
	};
	key <m> {
		type = "TWO_LEVEL",
		symbols [1] = [m, M]
	};
	key <,> {
		type = "TWO_LEVEL",
		symbols [1] = [comma, less]
	};
	key <.> {
		type = "TWO_LEVEL",
		symbols [1] = [period, greater]
	};
	key </> {
		type = "TWO_LEVEL",
		symbols [1] = [slash, question]
	};
	key <RSft> {
		type = "ONE_LEVEL",
		symbols [1] = [Shift_R]
	};
	key <KP*> {
		type = "ONE_LEVEL",
		symbols [1] = [asterisk]
	};
	key <LAlt> {
		type = "ONE_LEVEL",
		symbols [1] = [Alt_L]
	};
	key <Spce> {
		type = "ONE_LEVEL",
		symbols [1] = [space]
	};
	key <Caps> {
		type = "ONE_LEVEL",
		symbols [1] = [Control_L]
	};
	key <F1> {
		type = "ONE_LEVEL",
		symbols [1] = [F1]
	};
	key <F2> {
		type = "ONE_LEVEL",
		symbols [1] = [F2]
	};
	key <F3> {
		type = "ONE_LEVEL",
		symbols [1] = [F3]
	};
	key <F4> {
		type = "ONE_LEVEL",
		symbols [1] = [F4]
	};
	key <F5> {
		type = "ONE_LEVEL",
		symbols [1] = [F5]
	};
	key <F6> {
		type = "ONE_LEVEL",
		symbols [1] = [F6]
	};
	key <F7> {
		type = "ONE_LEVEL",
		symbols [1] = [F7]
	};
	key <F8> {
		type = "ONE_LEVEL",
		symbols [1] = [F8]
	};
	key <F9> {
		type = "ONE_LEVEL",
		symbols [1] = [F9]
	};
	key <F10> {
		type = "ONE_LEVEL",
		symbols [1] = [F10]
	};
	key <NmLk> {
		type = "ONE_LEVEL",
		symbols [1] = [Num_Lock]
	};
	key <ScLk> {
		type = "ONE_LEVEL",
		symbols [1] = [Scroll_Lock]
	};
	key <KP7> {
		type = "KEYPAD",
		symbols [1] = [KP_Home, KP_7]
	};
	key <KP8> {
		type = "KEYPAD",
		symbols [1] = [KP_Up, KP_8]
	};
	key <KP9> {
		type = "KEYPAD",
		symbols [1] = [KP_Prior, KP_9]
	};
	key <KP-> {
		type = "ONE_LEVEL",
		symbols [1] = [KP_Subtract]
	};
	key <KP4> {
		type = "KEYPAD",
		symbols [1] = [KP_Left, KP_4]
	};
	key <KP5> {
		type = "KEYPAD",
		symbols [1] = [KP_Begin, KP_5]
	};
	key <KP6> {
		type = "KEYPAD",
		symbols [1] = [KP_Right, KP_6]
	};
	key <KP+> {
		type = "ONE_LEVEL",
		symbols [1] = [KP_Add]
	};
	key <KP1> {
		type = "KEYPAD",
		symbols [1] = [KP_End, KP_1]
	};
	key <KP2> {
		type = "KEYPAD",
		symbols [1] = [KP_Down, KP_8]
	};
	key <KP3> {
		type = "KEYPAD",
		symbols [1] = [KP_Next, KP_9]
	};
	key <KP0> {
		type = "KEYPAD",
		symbols [1] = [KP_Insert, KP_0]
	};
	key <KP.> {
		type = "KEYPAD",
		symbols [1] = [KP_Delete, KP_Decimal]
	};
	key <|> {
		type = "TWO_LEVEL",
		symbols [1] = [bar, backslash]
	};
	key <F11> {
		type = "ONE_LEVEL",
		symbols [1] = [F11]
	};
	key <F12> {
		type = "ONE_LEVEL",
		symbols [1] = [F12]
	};
	key <KPEn> {
		type = "ONE_LEVEL",
		symbols [1] = [KP_Enter]
	};
	key <RCtl> {
		type = "ONE_LEVEL",
		symbols [1] = [Hyper_R]
	};
	key <KP/> {
		type = "ONE_LEVEL",
		symbols [1] = [KP_Divide]
	};
	key <PrSc> {
		type = "TWO_LEVEL",
		symbols [1] = [Print, Sys_Req]
	};
	key <RAlt> {
		type = "ONE_LEVEL",
		symbols [1] = [Meta_R]
	};
	key <Home> {
		type = "ONE_LEVEL",
		symbols [1] = [Home]
	};
	key <Up> {
		type = "ONE_LEVEL",
		symbols [1] = [Up]
	};
	key <PgUp> {
		type = "ONE_LEVEL",
		symbols [1] = [Prior]
	};
	key <Left> {
		type = "ONE_LEVEL",
		symbols [1] = [Left]
	};
	key <Rght> {
		type = "ONE_LEVEL",
		symbols [1] = [Right]
	};
	key <End> {
		type = "ONE_LEVEL",
		symbols [1] = [End]
	};
	key <Down> {
		type = "ONE_LEVEL",
		symbols [1] = [Down]
	};
	key <PgDn> {
		type = "ONE_LEVEL",
		symbols [1] = [Next]
	};
	key <Ins> {
		type = "ONE_LEVEL",
		symbols [1] = [Insert]
	};
	key <Del> {
		type = "ONE_LEVEL",
		symbols [1] = [Delete]
	};
	key <Mute> {
		type = "ONE_LEVEL",
		symbols [1] = [XF86AudioMute]
	};
	key <Vol-> {
		type = "ONE_LEVEL",
		symbols [1] = [XF86AudioLowerVolume]
	};
	key <Vol+> {
		type = "ONE_LEVEL",
		symbols [1] = [XF86AudioRaiseVolume]
	};
	key <Paus> {
		type = "TWO_LEVEL",
		symbols [1] = [Pause, Break]
	};
	key <Disp> {
		type = "ONE_LEVEL",
		symbols [1] = [NoSymbol]
	};
	key <Win> {
		type = "ONE_LEVEL",
		symbols [1] = [Super_L]
	};
	key <Slep> {
		type = "ONE_LEVEL",
		symbols [1] = [XF86Sleep]
	};
	key <Play> {
		type = "TWO_LEVEL",
		symbols [1] = [XF86AudioPlay, XF86AudioPause]
	};
	key <Brt-> {
		type = "ONE_LEVEL",
		symbols [1] = [XF86MonBrightnessDown]
	};
	key <Brt+> {
		type = "ONE_LEVEL",
		symbols [1] = [XF86MonBrightnessUp]
	};
	
	modifier_map Shift {Shift_L, Shift_R};
	// Lock is unused
	modifier_map Control {Control_L};
	modifier_map Mod1 {Alt_L};
	modifier_map Mod2 {Meta_R};
	modifier_map Mod3 {Super_L};
	modifier_map Mod4 {Hyper_L, Hyper_R};
	// modifier_map Mod5 {Num_Lock}; // Handled in compatibility
	
};
